- id: 1
  name: ReceiveReport
  primary_actor: Data Source
  secondary_actor: None
  preconditions: |
    System is connected to Data Source using correct protocol (STOMP)
  description: |
    The System received a real-time Report (Trust or GPS) from a Data Source.
  main_flow: |
    1. The use case starts when the Data Source generates a Report and sends Report to the System.
    2. System identifies the type of Report and adds row to database.
      - If the Report is a GPS Report: The System looks up the Rolling Stock associated with Report and the Service it is currently running.
      - If the Report is a Trust Report: The System looks up the Service associated with the Report and the Rolling Stock the System thinks is running the Service.
    3. The System checks if the Rolling Stock and Service are still going in the same direction and if they still match.
      - If they still match, System updates values of where the Rolling Stock and/or Service is.
      - If they do not match anymore, the System looks for another Rolling Stock that is close by that might be running the Service now and another Service that the current Rolling Stock might be running.
  postconditions: |
    Values updated
  alternative_flows: |
    None

- id: 2
  name: DownloadSchedule
  primary_actor: Time
  secondary_actor: Network Rail Data Feed
  preconditions: |
    System is connected to Network Rail Data Feeds using the STOMP Protocol.
  description: |
    Every morning, the System downloads a new Schedule.
  main_flow: |
    1. The use case starts at 6 am every morning.
    2. The System will send a request to the Network Rail Data Feeds Server to download new Schedule.
    3. Server sends back the file containing the Schedule.
    4. System deletes the current Schedule from its database.
    5. System imports new Schedule to database.
  postconditions: |
    New Schedule in Database
  alternative_flows: |
    None

- id: 3
  name: LoadHomePage
  primary_actor: User
  secondary_actor: Browser
  preconditions: |
    None
  description: |
    Whenever a User visits the home page, the System displays all of the Units that have been identified as not matching their planned service.
  main_flow: |
    1. Use case starts when the User visits the Home Page.
    2. Browser makes a request to System to get the Home Page.
    3. System finds a list of Rolling Stock, which have been identified as not matching their planned Services.
    4. System renders an HTML page, together with the data
    5. System sends HTML to browser, which then in term displays it.
  postconditions: |
    User can see current output of algorithm.
  alternative_flows: |
    None

- id: 4
  name: UserSelectsUnit
  primary_actor: User
  secondary_actor: Browser
  preconditions: |
    None
  description: |
    The GUI allows the User to get more information on a Unit
  main_flow: |
    1. Use case starts when the User selects a Rolling Stock
    2. Browser makes a request to server to get the appropriate page
    3. Server fetches all GPS Data on Rolling Stock and Trust Data of Services it might have run.
    4. System renders HTML page with the correct data
    5. System sends HTML to browser, which then in term displays it.
  postconditions: |
    User can see information on a particular Rolling Stock.
  alternative_flows: |
    None
